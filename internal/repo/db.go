// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package query

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.checkOrderReserveStmt, err = db.PrepareContext(ctx, checkOrderReserve); err != nil {
		return nil, fmt.Errorf("error preparing query CheckOrderReserve: %w", err)
	}
	if q.decreaseAvailableGoodsStmt, err = db.PrepareContext(ctx, decreaseAvailableGoods); err != nil {
		return nil, fmt.Errorf("error preparing query DecreaseAvailableGoods: %w", err)
	}
	if q.getAvailableGoodsStmt, err = db.PrepareContext(ctx, getAvailableGoods); err != nil {
		return nil, fmt.Errorf("error preparing query GetAvailableGoods: %w", err)
	}
	if q.increaseAvailableGoodsStmt, err = db.PrepareContext(ctx, increaseAvailableGoods); err != nil {
		return nil, fmt.Errorf("error preparing query IncreaseAvailableGoods: %w", err)
	}
	if q.reserveGoodsForOrderStmt, err = db.PrepareContext(ctx, reserveGoodsForOrder); err != nil {
		return nil, fmt.Errorf("error preparing query ReserveGoodsForOrder: %w", err)
	}
	if q.unreserveGoodsForOrderStmt, err = db.PrepareContext(ctx, unreserveGoodsForOrder); err != nil {
		return nil, fmt.Errorf("error preparing query UnreserveGoodsForOrder: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.checkOrderReserveStmt != nil {
		if cerr := q.checkOrderReserveStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkOrderReserveStmt: %w", cerr)
		}
	}
	if q.decreaseAvailableGoodsStmt != nil {
		if cerr := q.decreaseAvailableGoodsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing decreaseAvailableGoodsStmt: %w", cerr)
		}
	}
	if q.getAvailableGoodsStmt != nil {
		if cerr := q.getAvailableGoodsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAvailableGoodsStmt: %w", cerr)
		}
	}
	if q.increaseAvailableGoodsStmt != nil {
		if cerr := q.increaseAvailableGoodsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing increaseAvailableGoodsStmt: %w", cerr)
		}
	}
	if q.reserveGoodsForOrderStmt != nil {
		if cerr := q.reserveGoodsForOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing reserveGoodsForOrderStmt: %w", cerr)
		}
	}
	if q.unreserveGoodsForOrderStmt != nil {
		if cerr := q.unreserveGoodsForOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unreserveGoodsForOrderStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                         DBTX
	tx                         *sql.Tx
	checkOrderReserveStmt      *sql.Stmt
	decreaseAvailableGoodsStmt *sql.Stmt
	getAvailableGoodsStmt      *sql.Stmt
	increaseAvailableGoodsStmt *sql.Stmt
	reserveGoodsForOrderStmt   *sql.Stmt
	unreserveGoodsForOrderStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                         tx,
		tx:                         tx,
		checkOrderReserveStmt:      q.checkOrderReserveStmt,
		decreaseAvailableGoodsStmt: q.decreaseAvailableGoodsStmt,
		getAvailableGoodsStmt:      q.getAvailableGoodsStmt,
		increaseAvailableGoodsStmt: q.increaseAvailableGoodsStmt,
		reserveGoodsForOrderStmt:   q.reserveGoodsForOrderStmt,
		unreserveGoodsForOrderStmt: q.unreserveGoodsForOrderStmt,
	}
}
