// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: goods.sql

package query

import (
	"context"

	"github.com/lib/pq"
)

const checkOrderReserve = `-- name: CheckOrderReserve :many
SELECT id, order_id, nomenclature_id, quantity_reserved FROM goods_reservations WHERE order_id = $1
`

func (q *Queries) CheckOrderReserve(ctx context.Context, orderID string) ([]GoodsReservation, error) {
	rows, err := q.query(ctx, q.checkOrderReserveStmt, checkOrderReserve, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GoodsReservation
	for rows.Next() {
		var i GoodsReservation
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.NomenclatureID,
			&i.QuantityReserved,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const decreaseAvailableGoods = `-- name: DecreaseAvailableGoods :exec
UPDATE available_quantity SET available_quantity = available_quantity - $1 WHERE id = $2
`

type DecreaseAvailableGoodsParams struct {
	RequestQuantity int32
	ID              int32
}

func (q *Queries) DecreaseAvailableGoods(ctx context.Context, arg DecreaseAvailableGoodsParams) error {
	_, err := q.exec(ctx, q.decreaseAvailableGoodsStmt, decreaseAvailableGoods, arg.RequestQuantity, arg.ID)
	return err
}

const getAvailableGoods = `-- name: GetAvailableGoods :many
SELECT id, available_quantity FROM available_quantity WHERE id = ANY($1::integer[])
`

func (q *Queries) GetAvailableGoods(ctx context.Context, id []int32) ([]AvailableQuantity, error) {
	rows, err := q.query(ctx, q.getAvailableGoodsStmt, getAvailableGoods, pq.Array(id))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AvailableQuantity
	for rows.Next() {
		var i AvailableQuantity
		if err := rows.Scan(&i.ID, &i.AvailableQuantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const increaseAvailableGoods = `-- name: IncreaseAvailableGoods :exec
UPDATE available_quantity SET available_quantity = available_quantity + $1 WHERE id = $2
`

type IncreaseAvailableGoodsParams struct {
	RequestQuantity int32
	ID              int32
}

func (q *Queries) IncreaseAvailableGoods(ctx context.Context, arg IncreaseAvailableGoodsParams) error {
	_, err := q.exec(ctx, q.increaseAvailableGoodsStmt, increaseAvailableGoods, arg.RequestQuantity, arg.ID)
	return err
}

const reserveGoodsForOrder = `-- name: ReserveGoodsForOrder :exec
INSERT INTO goods_reservations (order_id, nomenclature_id, quantity_reserved) VALUES ($1, $2, $3)
`

type ReserveGoodsForOrderParams struct {
	OrderID          string
	NomenclatureID   int32
	QuantityReserved int32
}

func (q *Queries) ReserveGoodsForOrder(ctx context.Context, arg ReserveGoodsForOrderParams) error {
	_, err := q.exec(ctx, q.reserveGoodsForOrderStmt, reserveGoodsForOrder, arg.OrderID, arg.NomenclatureID, arg.QuantityReserved)
	return err
}

const unreserveGoodsForOrder = `-- name: UnreserveGoodsForOrder :exec
DELETE FROM goods_reservations WHERE order_id = $1
`

func (q *Queries) UnreserveGoodsForOrder(ctx context.Context, orderID string) error {
	_, err := q.exec(ctx, q.unreserveGoodsForOrderStmt, unreserveGoodsForOrder, orderID)
	return err
}
